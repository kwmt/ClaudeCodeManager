name: CI

on:
  pull_request:
    types: [opened, synchronize]

concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  CARGO_BUILD_JOBS: 2

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # For non-main branches, only test on macOS with Node.js 20 to reduce CI time
        # For main branch, test on all OS/Node.js combinations for comprehensive coverage
        os: ${{ github.ref == 'refs/heads/main' && fromJSON('["windows-latest", "macos-latest"]') || fromJSON('["macos-latest"]') }}
        node-version: ${{ github.ref == 'refs/heads/main' && fromJSON('[18, 20]') || fromJSON('[20]') }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: package-lock.json
        registry-url: 'https://registry.npmjs.org'

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Rust Cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: src-tauri
        cache-targets: true
        cache-on-failure: true
        shared-key: tauri-test-${{ matrix.os }}-${{ matrix.node-version }}
        # Enhanced cache for test artifacts and incremental compilation
        cache-directories: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          src-tauri/target/debug/deps/
          src-tauri/target/debug/build/
          src-tauri/target/debug/incremental/
          src-tauri/target/.rustc_info.json

    - name: Install Node.js dependencies
      run: |
        npm ci

    - name: Run TypeScript type check
      run: |
        npm run check

    - name: Run frontend tests
      run: |
        npm run test:coverage

    - name: Cache test binaries
      uses: actions/cache@v4
      with:
        path: |
          src-tauri/target/debug/deps/claude_code_manager*
          src-tauri/target/debug/deps/libclaude_code_manager*
        key: test-binaries-${{ matrix.os }}-${{ hashFiles('src-tauri/Cargo.lock', 'src-tauri/src/**/*.rs') }}
        restore-keys: |
          test-binaries-${{ matrix.os }}-

    - name: Run Rust tests
      env:
        # Optimize test compilation
        CARGO_INCREMENTAL: 1
        RUSTFLAGS: "-C debug-assertions=off"
        # Enable faster linking
        CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER: clang
        CARGO_TARGET_X86_64_APPLE_DARWIN_LINKER: clang
      run: |
        npm run cargo:test

    - name: Run Rust linting
      run: |
        npm run cargo:clippy -- -- -D warnings

    - name: Check Rust formatting
      run: |
        cd src-tauri
        cargo fmt -- --check

    - name: Upload coverage reports
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20'
      uses: codecov/codecov-action@v3
      with:
        file: coverage/coverage-final.json
        flags: frontend
        name: frontend-coverage

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # For non-main branches, only build on macOS to reduce CI time
        # For main branch, build on all OS for comprehensive coverage
        os: ${{ github.ref == 'refs/heads/main' && fromJSON('["windows-latest", "macos-latest"]') || fromJSON('["macos-latest"]') }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Rust Cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: src-tauri
        cache-targets: true
        cache-on-failure: true
        shared-key: tauri-build-${{ matrix.os }}
        # Enhanced cache for debug builds with incremental compilation
        cache-directories: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          src-tauri/target/debug/deps/
          src-tauri/target/debug/build/
          src-tauri/target/debug/incremental/
          src-tauri/target/.rustc_info.json

    - name: Install Node.js dependencies
      run: |
        npm ci

    - name: Build frontend
      run: |
        npm run build

    - name: Cache Tauri build artifacts
      uses: actions/cache@v4
      with:
        path: |
          src-tauri/target/debug/build/
          src-tauri/target/debug/deps/
          src-tauri/target/debug/incremental/
          src-tauri/target/debug/claude-code-manager*
        key: tauri-debug-${{ matrix.os }}-${{ hashFiles('src-tauri/Cargo.lock', 'src-tauri/src/**/*.rs', 'src-tauri/tauri.conf.json') }}
        restore-keys: |
          tauri-debug-${{ matrix.os }}-

    - name: Build Tauri app (Debug)
      env:
        CARGO_PROFILE_DEV_DEBUG: 1
        CARGO_PROFILE_DEV_SPLIT_DEBUGINFO: unpacked
        CARGO_INCREMENTAL: 1
        # Enable faster linking for debug builds
        CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER: clang
        CARGO_TARGET_X86_64_APPLE_DARWIN_LINKER: clang
      run: |
        npm run tauri build -- --debug

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tauri-app-${{ matrix.os }}
        path: |
          src-tauri/target/debug/bundle/
        retention-days: 30

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Rust Cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: src-tauri
        cache-targets: true
        cache-on-failure: true
        shared-key: security-audit-ubuntu
        # Cache cargo audit artifacts for faster runs
        cache-directories: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          ~/.cargo/bin/cargo-audit
          ~/.cargo/advisory-db/

    - name: Cache cargo-audit binary
      uses: actions/cache@v4
      id: cargo-audit-cache
      with:
        path: ~/.cargo/bin/cargo-audit
        key: cargo-audit-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          cargo-audit-${{ runner.os }}-

    - name: Cache advisory database
      uses: actions/cache@v4
      with:
        path: ~/.cargo/advisory-db
        key: advisory-db-${{ runner.os }}-${{ github.run_number }}
        restore-keys: |
          advisory-db-${{ runner.os }}-

    - name: Install Node.js dependencies
      run: |
        npm ci

    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate

    - name: Install cargo-audit (if not cached)
      if: steps.cargo-audit-cache.outputs.cache-hit != 'true'
      run: |
        cargo install cargo-audit

    - name: Run Rust security audit
      run: |
        cd src-tauri
        cargo audit

  release:
    name: Release Build
    runs-on: ${{ matrix.os }}
    if: github.ref == 'refs/heads/main'
    needs: [test, build, security]
    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Rust Cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: src-tauri
        cache-targets: true
        cache-on-failure: true
        shared-key: tauri-build-${{ matrix.os }}

    - name: Install Node.js dependencies
      run: |
        npm ci

    - name: Build Tauri app (Release)
      env:
        CARGO_PROFILE_RELEASE_LTO: thin
        CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
      run: |
        npm run tauri:build

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: claude-code-manager-${{ matrix.os }}-release
        path: |
          src-tauri/target/release/bundle/
        retention-days: 90